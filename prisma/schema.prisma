generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core User model with public profile features
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String?  @unique
  name      String?
  bio       String?
  avatar    String?
  website   String?
  location  String?
  joinedAt  DateTime @default(now()) // Badge feature - "Joined at" like streak apps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile settings
  isPublic Boolean @default(true)
  verified Boolean @default(false)

  // Streak and consistency tracking
  currentStreak    Int       @default(0)
  longestStreak    Int       @default(0)
  lastActivityDate DateTime?

  // GitHub integration
  githubUsername    String?
  githubSyncEnabled Boolean @default(true)

  // Socials
  xUsername    String?
  xSyncEnabled Boolean @default(true)

  // Relations
  posts                Post[]
  likes                Like[]
  comments             Comment[]
  followers            Follow[]              @relation("UserFollows")
  following            Follow[]              @relation("UserFollowing")
  activityLogs         ActivityLog[]
  achievements         UserAchievement[]
  revenueAccounts      RevenueAccount[]
  dailyStreaks         DailyStreak[]
  startups             Startup[]
  sponsorSubscriptions SponsorSubscription[]

  @@map("users")
}

// Enhanced Post model for accountability updates
model Post {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Post types for different accountability content
  type PostType @default(COMMITMENT)

  // Commitment-specific fields
  goal             String? // What they're committing to achieve
  deadline         DateTime? // When they need to complete it
  stakeAmount      Decimal? // Financial stake amount
  stakeCurrency    String? // Currency for the stake
  stakeDescription String? // Description of what happens if they fail
  stakeRecipient   String? // Who gets the stake if they fail (username/email)

  // Progress tracking
  progressPercentage Int?    @default(0) // 0-100 progress
  progressNotes      String? // Notes about current progress

  // Commitment status
  isCompleted Boolean   @default(false)
  isFailed    Boolean   @default(false)
  completedAt DateTime?
  failedAt    DateTime?

  // Revenue/achievement related data (legacy support)
  revenueAmount Decimal?
  currency      String?

  // GitHub related data (legacy support)
  commitsCount Int?
  repoUrl      String?

  // Metrics
  viewsCount  Int @default(0)
  sharesCount Int @default(0)

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]
  tags     PostTag[]

  @@map("posts")
}

enum PostType {
  COMMITMENT // Public commitment with goal, deadline, and stake
  PROGRESS // Progress update on existing commitment
  COMPLETION // Commitment completed successfully
  FAILURE // Commitment failed - stake activated
}

// Post tagging system
model Tag {
  id   String @id @default(uuid())
  name String @unique

  posts PostTag[]

  @@map("tags")
}

model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  // Relations
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollows", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

// Revenue tracking with Stripe and other providers
model RevenueAccount {
  id       String          @id @default(uuid())
  userId   String
  provider PaymentProvider

  // Provider-specific IDs
  stripeAccountId  String?
  stripeCustomerId String?
  paypalAccountId  String?
  lemonsqueezyId   String?

  // Account settings
  isActive Boolean @default(true)
  isPublic Boolean @default(true) // For transparent metrics
  currency String  @default("USD")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  revenues RevenueEntry[]

  @@map("revenue_accounts")
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  LEMONSQUEEZY
  GUMROAD
  PADDLE
  OTHER
}

model RevenueEntry {
  id        String @id @default(uuid())
  accountId String

  amount      Decimal
  currency    String
  description String?

  // Provider transaction data
  providerTransactionId String?
  providerFee           Decimal?
  netAmount             Decimal?

  // Categorization
  category    RevenueCategory @default(OTHER)
  productName String?

  // Timing
  transactionDate DateTime
  createdAt       DateTime @default(now())

  // Relations
  account RevenueAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("revenue_entries")
}

enum RevenueCategory {
  PRODUCT_SALE
  SUBSCRIPTION
  SERVICE
  AFFILIATE
  SPONSORSHIP
  DONATION
  OTHER
}

// Daily streak tracking
model DailyStreak {
  id     String   @id @default(uuid())
  userId String
  date   DateTime @db.Date

  // Activity types
  hasPosted      Boolean @default(false)
  hasCommitted   Boolean @default(false)
  hasRevenue     Boolean @default(false)
  hasAchievement Boolean @default(false)

  // Calculated
  isActiveDay Boolean @default(false)

  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_streaks")
}

// Achievement system
model Achievement {
  id          String              @id @default(uuid())
  name        String              @unique
  description String
  category    AchievementCategory

  // Visual
  icon   String? // Icon name or URL
  color  String? // Hex color
  rarity AchievementRarity @default(COMMON)

  // Requirements
  requirementType  RequirementType
  requirementValue Int // e.g., 10 for "10 consecutive days"

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

enum AchievementCategory {
  STREAK
  REVENUE
  SOCIAL
  GITHUB
  MILESTONE
  SPECIAL
}

enum AchievementRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum RequirementType {
  CONSECUTIVE_DAYS
  TOTAL_POSTS
  TOTAL_REVENUE
  TOTAL_COMMITS
  FOLLOWERS_COUNT
  CUSTOM
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  // Progress tracking
  progress    Int     @default(0)
  isCompleted Boolean @default(false)

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Activity logging (post-like features)
model ActivityLog {
  id       String       @id @default(uuid())
  userId   String
  type     ActivityType
  title    String
  content  String?
  metadata Json? // Flexible data storage

  // Visibility
  isPublic Boolean @default(true)

  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

enum ActivityType {
  STREAK_MILESTONE
  REVENUE_MILESTONE
  ACHIEVEMENT_UNLOCKED
  GITHUB_MILESTONE
  FOLLOWER_MILESTONE
  CUSTOM_LOG
}

// Startup model for tracking user ventures
model Startup {
  id          String  @id @default(uuid())
  userId      String
  name        String
  slug        String  @unique // URL-friendly identifier
  description String?
  tagline     String? // Brief one-liner
  tag         String? // Startup category/tag
  website     String?
  logo        String? // URL to logo image

  // Status and stage
  status StartupStatus @default(IDEA)
  stage  StartupStage  @default(PRE_SEED)

  // Key metrics
  foundedAt DateTime?
  revenue   Decimal?  @default(0)
  employees Int?      @default(1)
  funding   Decimal?  @default(0)
  valuation Decimal?

  // Social and links
  twitterHandle String?
  linkedinUrl   String?
  githubRepo    String?

  // Categories and tech
  industry  String?
  techStack String[] // Array of technologies

  // Visibility and settings
  isPublic   Boolean @default(true)
  isFeatured Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones           StartupMilestone[]
  sponsorSubscriptions SponsorSubscription[]

  @@map("startups")
}

// Sponsor subscription model for Polar integration
model SponsorSubscription {
  id        String  @id @default(uuid())
  userId    String
  startupId String? // Optional - can be null for general sponsorship

  // Polar integration
  polarCustomerId     String? // Polar customer ID
  polarSubscriptionId String? // For recurring subscriptions
  polarOrderId        String? // For one-time payments

  // Subscription details
  planType SponsorPlanType
  status   SponsorStatus   @default(ACTIVE)
  amount   Decimal
  currency String          @default("USD")

  // Billing
  billingInterval String? // "month", "year", "lifetime"
  nextBillingDate DateTime?

  // Benefits
  isFeatured    Boolean @default(false)
  priorityOrder Int     @default(0)
  customBadge   String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime? // For lifetime plans, this might be null

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startup Startup? @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@map("sponsor_subscriptions")
}

enum SponsorPlanType {
  LIFETIME
  MONTHLY
  ANNUAL
}

enum SponsorStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum StartupStatus {
  IDEA
  BUILDING
  LAUNCHED
  GROWING
  ACQUIRED
  SHUTDOWN
}

enum StartupStage {
  PRE_SEED
  SEED
  SERIES_A
  SERIES_B
  SERIES_C
  LATER_STAGE
  BOOTSTRAPPED
  PROFITABLE
}

// Milestone tracking for startups
model StartupMilestone {
  id          String        @id @default(uuid())
  startupId   String
  title       String
  description String?
  type        MilestoneType
  value       Decimal? // For revenue, funding, etc.
  unit        String? // Currency, count, etc.
  achievedAt  DateTime      @default(now())
  isPublic    Boolean       @default(true)

  // Relations
  startup Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@map("startup_milestones")
}

enum MilestoneType {
  LAUNCH
  FIRST_USER
  FIRST_REVENUE
  FUNDING_ROUND
  USER_MILESTONE
  REVENUE_MILESTONE
  PARTNERSHIP
  PRODUCT_UPDATE
  TEAM_HIRE
  ACQUISITION
  OTHER
}
